<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yescallop&#39;s blog</title>
  
  
  <link href="https://yescallop.cn/atom.xml" rel="self"/>
  
  <link href="https://yescallop.cn/"/>
  <updated>2021-12-17T12:54:20.000Z</updated>
  <id>https://yescallop.cn/</id>
  
  <author>
    <name>Scallop Ye</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1st PKU GeekGame Writeup</title>
    <link href="https://yescallop.cn/p/gg-1st-wp/"/>
    <id>https://yescallop.cn/p/gg-1st-wp/</id>
    <published>2021-12-13T08:16:16.000Z</published>
    <updated>2021-12-17T12:54:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>未完待续.</p><span id="more"></span><h2 id="→签到←"><a href="#→签到←" class="headerlink" title="→签到←"></a>→签到←</h2><p>用浏览器打开文件，全选复制，得到两行文本：</p><figure class="highlight text"><figcaption><span>Original Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fa&#123;aeAGetTm@ekaev!</span><br><span class="line">lgHv__ra_ieGeGm_1&#125;</span><br></pre></td></tr></table></figure><p>将两行字符交错置于一行，得 <code>flag&#123;Have_A_Great_Time@GeekGame_v1!&#125;</code>.</p><h2 id="小北问答-Remake"><a href="#小北问答-Remake" class="headerlink" title="小北问答 Remake"></a>小北问答 Remake</h2><ol><li><p>北京大学燕园校区有理科 1 号楼到理科 X 号楼，但没有理科 (X+1) 号及之后的楼。X 是？</p><p> <code>5</code>. 搜索可得.</p></li><li><p>上一届（第零届）比赛的总注册人数有多少？</p><p> <code>407</code>. 见<a href="https://news.pku.edu.cn/xwzh/203d197d93c245a1aec23626bb43d464.htm">相关报道</a>.</p></li><li><p>geekgame.pku.edu.cn 的 HTTPS 证书曾有一次忘记续期了，发生过期的时间是？</p><p> <code>2021-07-11T08:49:53+08:00</code>. 见 <a href="https://search.censys.io/">Censys</a>. 注意时区.</p></li><li><p>2020 年 DEFCON CTF 资格赛签到题的 flag 是？</p><p> <code>OOO&#123;this_is_the_welcome_flag&#125;</code>. 见 <a href="https://scoreboard2020.oooverflow.io/">Scoreboard</a>.</p></li><li><p>在大小为 672328094 * 386900246 的方形棋盘上放 3 枚（相同的）皇后且它们互不攻击，有几种方法？</p><p> <code>2933523260166137923998409309647057493882806525577536</code>. 归纳可得通项.</p></li><li><p>上一届（第零届）比赛的“小北问答1202”题目会把所有选手提交的答案存到 SQLite 数据库的一个表中，这个表名叫？</p><p> <code>submits</code>. 见 <a href="https://github.com/PKU-GeekGame/geekgame-0th/blob/main/src/choice/game/db.py">GitHub</a>.</p></li><li><p>国际互联网由许多个自治系统（AS）组成。北京大学有一个自己的自治系统，它的编号是？</p><p> <code>AS59201</code>. 见 <a href="https://whois.ipip.net/search/PEKING">IPIP.net ASN Search</a>. 排除 CERNET2 节点 <code>AS24349</code>.</p></li><li><p>截止到 2021 年 6 月 1 日，完全由北京大学信息科学技术学院下属的中文名称最长的实验室叫？</p><p> <code>区域光纤通信网与新型光通信系统国家重点实验室</code>. 在该学院<a href="https://eecs.pku.edu.cn/">网站</a>下搜索并手动比较可得.</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;未完待续.&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="https://yescallop.cn/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://yescallop.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hackergame 2021 Writeup</title>
    <link href="https://yescallop.cn/p/hg-2021-wp/"/>
    <id>https://yescallop.cn/p/hg-2021-wp/</id>
    <published>2021-11-05T03:08:11.000Z</published>
    <updated>2021-11-05T04:27:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>这次做出来的题比较少，于是只有一篇 Writeup。</p><span id="more"></span><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><blockquote><p>为了能让大家顺利签到，命题组把每一秒的 flag 都记录下来制成了日记本的一页。你只需要打开日记，翻到 Hackergame 2021 比赛进行期间的任何一页就能得到 flag！</p></blockquote><p>打开题目就是熟悉的 1970 年 1 月 1 日，每点一次 Next 就会 +1s，这让我<del>不禁想到了些什么</del>。于是直接搜索 <strong>时间戳</strong>，复制，粘贴到地址栏替换 page 参数，回车就得到 flag。</p><h2 id="进制十六——参上"><a href="#进制十六——参上" class="headerlink" title="进制十六——参上"></a>进制十六——参上</h2><p>映入眼帘的是一张图片，右边的 flag 被遮住了，但左边有其字符对应的十六进制值。</p><p><img src="/p/hg-2021-wp/hex_editor.png" alt="Hex Editor"></p><p>打开 Sublime Text，把对应的十六进制值一股脑输进去，以十六进制编码保存，重新用 UTF-8 编码打开，即得到 flag。</p><h2 id="去吧！追寻自由的电波"><a href="#去吧！追寻自由的电波" class="headerlink" title="去吧！追寻自由的电波"></a>去吧！追寻自由的电波</h2><blockquote><p>「X 同学使用了无线电中惯用的方法来区分字符串中读音相近的字母」<br>「最终接受到的录音的速度有所改变」</p></blockquote><p>读完题后首先听了听音频，确实听不清，于是用软件放慢到 0.25 倍，结合题目就大致清楚方向了（因为听过一些 ATC，这时我开始窃喜）。</p><p>搜到了 <strong>国际无线电通话拼写字母</strong> 列表后，经过一番艰苦卓绝的英语听力，终于听出了如下原文（这时我已心力憔悴）：</p><figure class="highlight text"><figcaption><span>Original Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Foxtrot Lima Alpha Golf</span><br><span class="line">left bracket</span><br><span class="line">Papa Hotel Oscar November Echo Tango India Charlie Alpha Bravo</span><br><span class="line">right bracket</span><br></pre></td></tr></table></figure><p>即 <code>flag&#123;phoneticab&#125;</code>。</p><p>然而比赛之后我一听官方题解里放慢的音频，好家伙，怎么这么清晰？原来是因为当时我放慢音频的时候保持了原音调，按改变音调的正确方法放慢到 1&#x2F;3 后甚至比题解里的还清晰。</p><p><audio controls="controls" src="radio_slow.mp3">您的浏览器不支持 audio 元素。</audio></p><h2 id="猫咪问答-Pro-Max"><a href="#猫咪问答-Pro-Max" class="headerlink" title="猫咪问答 Pro Max"></a>猫咪问答 Pro Max</h2><ol><li><p>2017 年，中科大信息安全俱乐部（SEC@USTC）并入中科大 Linux 用户协会（USTCLUG）。目前，信息安全俱乐部的域名（sec.ustc.edu.cn）已经无法访问，但你能找到信息安全俱乐部的社团章程在哪一天的会员代表大会上通过的吗？<br>打开 <a href="https://archive.org/">Internet Archive</a> 后，搜索 <code>sec.ustc.edu.cn</code>，随后在 <a href="https://web.archive.org/web/20181004003308/http://sec.ustc.edu.cn/doku.php/codes">这里</a> 找到答案：<code>20150504</code>；</p></li><li><p>中国科学技术大学 Linux 用户协会在近五年多少次被评为校五星级社团？<br>前往 <a href="https://lug.ustc.edu.cn/">USTC LUG 主页</a>，一通寻找后在 <a href="https://lug.ustc.edu.cn/wiki/intro/">这里</a> 找到了相关介绍，我一数，得到答案 <code>5</code>；</p></li><li><p>中国科学技术大学 Linux 用户协会位于西区图书馆的活动室门口的牌子上“LUG @ USTC”下方的小字是？<br>在 USTC LUG 站内搜索 <strong>西区图书馆</strong>，立即得到答案：<code>Development Team of Library</code>；</p></li><li><p>在 SIGBOVIK 2021 的一篇关于二进制 Newcomb-Benford 定律的论文中，作者一共展示了多少个数据集对其理论结果进行验证？<br>在 SIGBOVIK 主页下找到其 <a href="http://www.sigbovik.org/2021/proceedings.pdf">2021 PDF</a>，在 PDF 内搜索 <code>Newcomb-Benford</code>，看到有 14 张图片与数据有关。排除非二进制的第一张，可以确定答案为 <code>13</code>；</p></li><li><p>不严格遵循协议规范的操作着实令人生厌，好在 IETF 于 2021 年成立了 Protocol Police 以监督并惩戒所有违背 RFC 文档的行为个体。假如你发现了某位同学可能违反了协议规范，根据 Protocol Police 相关文档中规定的举报方法，你应该将你的举报信发往何处？<br>找到相关文档 <a href="https://datatracker.ietf.org/doc/rfc8962/">IETF RFC 8962</a>，忍住不笑看到第六节，得到答案 <code>/dev/null</code>。</p></li></ol><h2 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h2><p>看到这题，我最开始想到的是放负数个瓜（实际上并没有用，怎么放都是三的倍数），但后端不让：<code>操作无效：不能放负数个瓜</code>。</p><p>于是通过放上较多的瓜测试得出应该要溢出 64 位有符号整数，进一步尝试后找到方法：</p><p>令 a &#x3D; (2 ^ 63 - 1) &#x2F; 6 &#x3D; 1537228672809129301，依次放上 6 斤的瓜 a, (a + 1) 个，这时电子秤上就有 -2 斤瓜。</p><p>重复上述操作后再放上 6 斤的瓜 4 个即可得到 flag。</p><h2 id="透明的文件"><a href="#透明的文件" class="headerlink" title="透明的文件"></a>透明的文件</h2><p>搜索后得知文件内的文本为 <strong>ANSI 转义序列</strong>， 其中每个左方括号 <code>[</code> 前应有一个 ESC 字符 (0x1B)。要正确显示此序列，需要将所有 <code>[</code> 替换为 <code>\e[</code>，并在一个优质终端（例如 <em>Git Bash</em>）中使用命令 <code>echo -e</code> 打印。</p><p>将命令写入 shell 脚本后运行，发现终端内的部分文字出现了缺失，右键全选后才能显示出彩色 flag。</p><p>然而终端内仍有部分文字会影响 flag 的阅读，我们可以在脚本后加入一行 <code>read -n 1</code>，并运行 <code>clear &amp;&amp; ./a.sh</code> 来解决此问题。最终结果如下图所示：</p><p><img src="/p/hg-2021-wp/colorful_flag.png" alt="flag{abxnniohkalmcowsayfiglet}"></p><h2 id="旅行照片"><a href="#旅行照片" class="headerlink" title="旅行照片"></a>旅行照片</h2><p>从图中的 <strong>活海鲜</strong> 招牌可以看出图中的地点是在海边，最开始我在地图上沿海岸线通过地形找了很久也没有结果，于是只能转向网络搜索。</p><p>通过关键词 <strong>肯德基 海滩 停车场</strong> 搜索，我在百度上找到了图中 KFC 分店的位置——秦皇岛新澳海底世界，那么接下来的题目就很简单了。</p><ol><li><p>通过对比图片和地图，可以得出拍摄者的面朝方向为 <strong>东南</strong>；</p></li><li><p>由第 1 题可知楼影的朝向大致为东北，同时影子较长，于是可以判断拍摄时间大致为 <strong>傍晚</strong>；</p></li><li><p>注意到提示 <code>小区内每栋楼的层高和海拔均相同，且地上部分楼层为从 1 开始的连续自然数</code>，且图中的楼有 14 层的窗户可见，于是可以知道答案大致为 14，最终答案正好也为 <strong>14</strong>；</p></li><li><p>搜索得知 KFC 分店的电话号码是 <strong>0335-7168800</strong>；</p></li><li><p>运用街景地图得知这三个汉字为 <strong>海豚馆</strong>。</p></li></ol><h2 id="FLAG-助力大红包"><a href="#FLAG-助力大红包" class="headerlink" title="FLAG 助力大红包"></a>FLAG 助力大红包</h2><p>首先手动助力试了试，重复助力后提示 <code>重复的 /8 地址</code>。然而，由于 <strong>&#x2F;8 IPv4 地址块</strong> 只有 256 个，通过常规方法显然是不能助力成功的，于是想到伪造地址来助力。</p><p>可以编写一个 Rust 程序来解答此题，其中用到的 HTTP Header <code>X-Forwarded-For</code> 被代理服务器用于表示请求端的真实 IP。</p><figure class="highlight rust"><figcaption><span>invite.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;thread, time::Duration&#125;;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">client</span> = reqwest::blocking::Client::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..=<span class="number">255</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">ip</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;.241.53.1&quot;</span>, i);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">resp</span> = client</span><br><span class="line">            .<span class="title function_ invoke__">post</span>(<span class="string">&quot;http://202.38.93.111:10888/invite/uuid&quot;</span>)</span><br><span class="line">            .<span class="title function_ invoke__">header</span>(<span class="string">&quot;X-Forwarded-For&quot;</span>, &amp;ip)</span><br><span class="line">            .<span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">            .<span class="title function_ invoke__">body</span>(<span class="built_in">format!</span>(<span class="string">&quot;ip=&#123;&#125;&quot;</span>, ip))</span><br><span class="line">            .<span class="title function_ invoke__">send</span>()</span><br><span class="line">            .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, resp.<span class="title function_ invoke__">text</span>().<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">        thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">1500</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑个几分钟就可得到 flag。</p><h2 id="Amnesia-轻度失忆"><a href="#Amnesia-轻度失忆" class="headerlink" title="Amnesia - 轻度失忆"></a>Amnesia - 轻度失忆</h2><p>搜索得知 <code>.data</code> 段用于存放已初始化的全局变量，而 <code>.rodata</code> 段用于存放常量数据，于是容易想到可以一个字符一个字符地打印。</p><figure class="highlight c"><figcaption><span>amnesia_1.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;H&#x27;</span>); <span class="built_in">putchar</span>(<span class="string">&#x27;e&#x27;</span>); <span class="built_in">putchar</span>(<span class="string">&#x27;l&#x27;</span>); <span class="built_in">putchar</span>(<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;o&#x27;</span>); <span class="built_in">putchar</span>(<span class="string">&#x27;,&#x27;</span>); <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>); <span class="built_in">putchar</span>(<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;o&#x27;</span>); <span class="built_in">putchar</span>(<span class="string">&#x27;r&#x27;</span>); <span class="built_in">putchar</span>(<span class="string">&#x27;l&#x27;</span>); <span class="built_in">putchar</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图之上的信息"><a href="#图之上的信息" class="headerlink" title="图之上的信息"></a>图之上的信息</h2><p>首先用测试账号登录，根据测试账号的笔记内容，结合题目中对 GraphQL 的描述，大致明白需要渗透 API 来获取 admin 账号的邮箱。</p><p>分析登录后界面的源代码，可以发现如下语句：</p><figure class="highlight javascript"><figcaption><span>Source</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;/graphql&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">query</span>: <span class="string">&quot;&#123; notes(userId: 2) &#123; id\ncontents &#125;&#125;&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>从中可以看出 API 的路径、调用方法和参数。注意到 <code>guest</code> 的 <code>userId</code> 为 <code>2</code>，于是猜想 <code>admin</code> 的 <code>userId</code> 为 <code>1</code>。</p><p>更改 <code>userId</code> 并请求后，服务器返回了错误信息：<code>This user has no permission to access this.</code></p><p>果然没有如此简单，那么我们进一步查找资料可以了解到 GraphQL 的安全问题：<a href="https://graphql.cn/learn/introspection/">内省系统</a>。可以通过如下的 query 来查询 GraphQL 中所有可用的类型、查询及参数：</p><figure class="highlight plaintext"><figcaption><span>GraphQL Query</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  __schema &#123;</span><br><span class="line">    types &#123;</span><br><span class="line">      name</span><br><span class="line">      fields &#123;</span><br><span class="line">        name</span><br><span class="line">        args &#123;</span><br><span class="line">          name</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询后得到以下结果（经缩减）：</p><figure class="highlight json"><figcaption><span>Data_1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Query&quot;</span><span class="punctuation">,</span><span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;note&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;id&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;notes&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;userId&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;user&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;id&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;GNote&quot;</span><span class="punctuation">,</span><span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;id&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;contents&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;GUser&quot;</span><span class="punctuation">,</span><span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;id&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;username&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;privateEmail&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>于是可以构造查询 <code>&#123; user(id: 1) &#123; username\nprivateEmail &#125;&#125;</code>，请求后得到 flag:</p><figure class="highlight json"><figcaption><span>Data_2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;privateEmail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;flag&#123;dont_let_graphql_l3ak_data_8e9ec4ca0c@hackergame.ustc&#125;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="赛博厨房"><a href="#赛博厨房" class="headerlink" title="赛博厨房"></a>赛博厨房</h2><h3 id="Level-0"><a href="#Level-0" class="headerlink" title="Level 0"></a>Level 0</h3><p>稍微尝试了一下，发现保存程序后第二天的菜谱会变，但长度始终为 2。<br>由于只有两种菜，且每次做菜前都会清理厨房，最多需要 4 个程序就能通关。</p><h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h3><p>看到一堆 0 就写了一个循环，立刻通关：</p><figure class="highlight text"><figcaption><span>赛博厨房</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">向右 1 步</span><br><span class="line">拿起 1 个物品</span><br><span class="line">向下 1 步</span><br><span class="line">向左 1 步</span><br><span class="line">放下 1 个物品</span><br><span class="line">向上 1 步</span><br><span class="line">如果手上的物品大于等于 0 向上跳转 6 行</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这次做出来的题比较少，于是只有一篇 Writeup。&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="https://yescallop.cn/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://yescallop.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>两岸差异用词爬虫</title>
    <link href="https://yescallop.cn/p/clcrawler/"/>
    <id>https://yescallop.cn/p/clcrawler/</id>
    <published>2017-09-10T06:14:14.000Z</published>
    <updated>2021-11-04T09:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>写在开头 - <strong>Java 大法好</strong></p><p>昨天我在把一个电影字幕从繁体转成简体时，发现转完后有一些台湾地区的用词（繁体字幕大部分都是台湾的），所以突发灵感想写个翻译程序。</p><p>首先得有个词库，<a href="http://chinese-linguipedia.org/clk/diff">Chinese Linguipedia</a> 这个网站，里边有个两岸差异用词，看上去挺全的，就选它了。</p><span id="more"></span><p>词语有三级分类，每页最多十行，链接如此：<br><code>http://chinese-linguipedia.org/clk/diff?class=二级分类编号&amp;classNa=三级分类名称&amp;page=页面</code></p><p>编号范围是 1~34，其中 1~5 是五个一级分类的编号。因为爬下来的数据要细分，所以就忽略大分类，直接从分类 6~34 每一页遍历过去获取。<br>同时，只有 6, 7, 8 三个二级分类下有三级分类，这些分类我手打进了一个 <a href="https://github.com/yescallop/ChineseLinguipediaCrawler/blob/master/src/structure.json">json</a> 里。</p><p>然后是网页处理部分</p><p>每一页都有几段这样的 html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>;&gt;</span>同實異名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;head3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-family:&#x27;微軟正黑體&#x27;;font-size:1.1em;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://chinese-linguipedia.org/clk/search/刀具/0/0?srchType=1&quot;</span>&gt;</span>刀具<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;head3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-family:&#x27;微軟正黑體&#x27;;font-size:1.1em;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://chinese-linguipedia.org/clk/search/刀具/0/0?srchType=1&quot;</span>&gt;</span>刀具<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://chinese-linguipedia.org/clk/search/刃具/0/0?srchType=1&quot;</span>&gt;</span>刃具<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先通过正则表达式 <code>&lt;td align=&#39;center&#39;;&gt;(.*?)&lt;/td&gt;\r\n(.*?)\r\n(.*)</code><br>取出 $1 “同異類別”、$2 “臺灣語詞” 的元素、$3 “大陸語詞” 的元素<br>然后用另一个正则表达式 <code>1\&quot;&gt;([\s\S]*?)&lt;/a</code> 匹配 $2 和 $3，得到每个“臺灣語詞”和“大陸語詞”，之后以<code>/</code>为分隔符合并<br>向 <em>output.csv</em> 文件写入一行：<code>一级分类,二级分类,三级分类,同異類別,臺灣語詞,大陸語詞</code></p><p>有人可能注意到上面用了一个 <code>[\s\S]</code>，这里是因为网站的数据有点问题，有一条记录的词里边有个换行，导致获取不到这条记录。</p><p>合并字符串集合或数组，用到了一个 Java 8 String 类的新方法 String.join，第一个参数是分隔符字符串，第二个参数是一个集合或者数组</p><p>至于翻译程序，晚点再来弄，目前计划是检测到一个台湾用词，就显示出相对应的所有大陆用词，可以自定义更改的词语。</p><p>需要考虑到一个词语重叠问题，和类似于“簡訊地址”这样的词语的翻译问题，应该需要翻译为“联系方式”。</p><p>还有一些这个词库里没有涉及到的词语，例如“聯絡”和“联系”，网站上面显示的是大陆“今不用”此词语，可以通过增加的方法来完善。</p><p><strong>同时这个网站支持通配符查询功能，应该可以将整部字典都爬下来，只是一个时间问题。</strong></p><p>若有哪位大神比较熟悉于这方面的问题，我们可以互相讨论一下，来共同完成这个项目。</p><p>本项目的 GitHub：<br><a href="https://github.com/yescallop/ChineseLinguipediaCrawler">https://github.com/yescallop/ChineseLinguipediaCrawler</a></p><p>PS: 微软系列产品不能正确识别无 BOM 头的 UTF-8 编码文件，需要在写入数据之前在文件头写入 BOM 头 <code>0xEFBBBF</code></p><p>PPS: 这个网站早已大改，我对 Java 的记忆也已变淡，谨以此篇留作纪念。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;写在开头 - &lt;strong&gt;Java 大法好&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;昨天我在把一个电影字幕从繁体转成简体时，发现转完后有一些台湾地区的用词（繁体字幕大部分都是台湾的），所以突发灵感想写个翻译程序。&lt;/p&gt;
&lt;p&gt;首先得有个词库，&lt;a href=&quot;http://chinese-linguipedia.org/clk/diff&quot;&gt;Chinese Linguipedia&lt;/a&gt; 这个网站，里边有个两岸差异用词，看上去挺全的，就选它了。&lt;/p&gt;</summary>
    
    
    
    <category term="数据" scheme="https://yescallop.cn/categories/%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Java" scheme="https://yescallop.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>在树莓派上搭建邮件服务器 Postfix + Dovecot + SASL</title>
    <link href="https://yescallop.cn/p/mailserver/"/>
    <id>https://yescallop.cn/p/mailserver/</id>
    <published>2016-07-02T12:54:14.000Z</published>
    <updated>2021-11-04T09:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近入手了一台树莓派 3B，要把 ECS 上的各种服务器全部迁移到上面，配置邮件服务器的方法有些麻烦，所以在此写一篇教程分享给大家供借鉴。</p><span id="more"></span><blockquote><p>更新 2017-04-29: 无法发送邮件，很久没有解决<br>更新 2017-08-23: 发件问题已修复</p></blockquote><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p><strong>Raspberry Pi 3 Model B</strong>，运行 <strong>Raspbian</strong> 最新版本</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><p>首先通过 apt-get 获取 Postfix，Dovecot 和 SASL</p><p>我个人认为 IMAP 比 POP3 好，所以在此没有配置 POP3，如有需要请加上 dovecot-pop3d</p><p><code>sudo apt-get install postfix dovecot-imapd sasl2-bin</code></p><h3 id="配置-Postfix-和-SASL"><a href="#配置-Postfix-和-SASL" class="headerlink" title="配置 Postfix 和 SASL"></a>配置 Postfix 和 SASL</h3><p>下面部分内容借鉴了 Debian 官方 Wiki 的文章 <a href="https://wiki.debian.org/PostfixAndSASL">PostfixAndSASL</a></p><ol><li><p>创建一个文件 &#x2F;etc&#x2F;postfix&#x2F;sasl&#x2F;smtpd.conf，内容如下</p><pre><code> pwcheck_method: saslauthd mech_list: PLAIN LOGIN</code></pre></li><li><p>复制 &#x2F;etc&#x2F;default&#x2F;saslauthd 到 &#x2F;etc&#x2F;default&#x2F;saslauthd-postfix，修改内容如下</p><pre><code> START=yes DESC=&quot;SASL Auth. Daemon for Postfix&quot; NAME=&quot;saslauthd-postf&quot; # 最长为 15 字符 OPTIONS=&quot;-c -m /var/spool/postfix/var/run/saslauthd&quot;</code></pre></li><li><p>创建 Postfix 改变根目录所需的子目录，命令：</p><p> <code>sudo dpkg-statoverride --add root sasl 710 /var/spool/postfix/var/run/saslauthd</code></p></li><li><p>将 postfix 用户加入组 sasl</p><p> <code>sudo adduser postfix sasl</code></p></li><li><p>重启 saslauthd 服务</p><p> <code>sudo service saslauthd restart</code></p></li><li><p>编辑 Postfix 配置文件 &#x2F;etc&#x2F;postfix&#x2F;main.cf，以我的域名 yescallop.cn 为例，修改内容如下</p><pre><code> myhostname = yescallop.cn myorigin = $myhostname mydestination = $myhostname, localhost smtpd_sasl_local_domain = $myhostname smtpd_sasl_auth_enable = yes broken_sasl_auth_clients = yes smtpd_sasl_security_options = noanonymous smtpd_recipient_restrictions = permit_sasl_authenticated, reject_unauth_destination</code></pre></li><li><p>重启 Postfix （重载配置是不够的）</p><p> <code>sudo service postfix restart</code></p></li></ol><p>然后就可以使用 telnet 连接 25 端口测试了</p><h3 id="配置-Dovecot"><a href="#配置-Dovecot" class="headerlink" title="配置 Dovecot"></a>配置 Dovecot</h3><ol><li><p>编辑 Dovecot 配置文件 &#x2F;etc&#x2F;dovecot&#x2F;dovecot.conf，修改内容如下：</p><pre><code> listen = *</code></pre></li><li><p>编辑认证配置文件 &#x2F;etc&#x2F;dovecot&#x2F;conf.d&#x2F;10-auth.conf，修改内容如下：</p><pre><code> disable_plaintext_auth = no auth_mechanisms = plain login</code></pre></li><li><p>编辑 IMAP 配置文件 &#x2F;etc&#x2F;dovecot&#x2F;conf.d&#x2F;20-imap.conf，修改内容如下：</p><pre><code> mail_max_userip_connections = 100 # 此处可自定义，不要太小，容易导致连接被拒绝</code></pre></li><li><p>重启 Dovecot</p><p> <code>sudo service dovecot restart</code></p></li></ol><p>可以使用 telnet 连接 143 端口测试</p><p>最后可以添加 Postfix，Dovecot 和 SASL 到启动组</p><pre><code>sudo update-rc.d postfix defaultssudo update-rc.d dovecot defaultssudo update-rc.d saslauthd defaults</code></pre><p><strong>All Done!</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近入手了一台树莓派 3B，要把 ECS 上的各种服务器全部迁移到上面，配置邮件服务器的方法有些麻烦，所以在此写一篇教程分享给大家供借鉴。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://yescallop.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="https://yescallop.cn/tags/Linux/"/>
    
  </entry>
  
</feed>
